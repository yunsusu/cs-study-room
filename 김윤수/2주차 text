# 데이터

## 정보 단위

컴퓨터는 0 또는 1밖에 이해하지 못한다.

이 정보 단위를 비트라고 합니다. (0과 1을 표현하는 가장 작은 정보 단위)

전구 한 개로 (꺼짐) 혹은 (켜짐), 두 가지 상태를 표현할 수 있듯 

1비트는 0또는1 , 두 가지 정보를 표현할 수 있습니다.

그렇다면 2 비트는?

켜짐,꺼짐

꺼짐,꺼짐

..

등 으로 네 가지 정도 표현합니다.

그렇다면 3비트는..?

총 여덟 가지 상태를 표현할 수 있습니다.

**이처럼 n비트는 2n(제곱) 가지 정보를 표현할 수 있습니다.**

프로그램의 크기를 말할 때 비트보다는 바이트, 킬로바이트, 메가바이트, 기가바이트, 테라바이트 등을 사용합니다.

| 1바이트 | 8비트 |
| --- | --- |
| 1킬로바이트 | 1,000바이트 |
| 1메가바이트 | 1,000킬로바이트 |
| 1기가바이트 | 1,000메가바이트 |
| 1테라바이트 | 1,000기가바이트 |

이렇게 됩니다.

1024바이트씩 나누기도 하는데 이는 따로 단위가 있다.

- 워드
    
    중요한 정보 단위 중 워드라는 단위도 있습니다. 워드란 CPU가 한 번에 처리할 수 있는 데이터 크기를 의미합니다.
    
    만약 CPU가 한번에 16비트를 처리할 수 있다면 1워드는 16비트가 되는것입니다.
    
    이렇게 정의된 워드의
    
    - 하프 워드 : 절반 크기
    - 풀 워드 : 1배 크기
    - 더블 워드 : 2배 크기

## 이진법

수학에서 0과 1만으로 모든 숫자를 표현하는 방법을 이진법이라고 합니다.

우리는 보통 9를 넘어가는 시점에 자리올림을 한다

9 다음 10

19 다음 20

이는 일상적으로 **십진법**을 사용하기 때문에 그렇다.

**이진법으로 표현한 수를 이진수**

**십진법으로 표현한 수를 십진수**

라고 한다.

## 이진수의 음수 표현

십진법음수를 표현할 땐 단순히 숫자 앞에 마이너스 부호를 붙이면 그만이다.

0과 1만으로 음수를 표현하는 방법 중 가장 널리 사용되는 방법은 **2의 보수**를 구해 이 값을 음수로 간주하는 방법입니다.

2의 보수의 사전적 의미는 어떤 수를 그보다 큰 2n에서 뺀 값을 의미합니다.

이렇게까지 사전적 의미로 이해할 필요는 없다.

2의 보수를 쉽게 표현하자면 **모든 0과 1을 뒤집고, 거기에 1을 더한 값** 으로 이해하면 된다.

### 플래그

컴퓨터 내부에서 어떤 수를 다룰 때는 이 수가 양수인지 음수인지를 구분하기 위해서 **플래그** 를 사용합니다.

플래그는 쉽게 말하면 **부가 정보** 입니다.

## 십육진법

십육진법은 수가 15를 넘어가는 시점에 자리 올림을 하는 숫자 표현 방식입니다.

십육진법은 왜 사용하냐..

주된 이유중 하나는 이진수를 십육진수로, 십육진수를 이진수로 변환하기 쉽기 때문입니다.

### 십육진수를 이진수로 변환하기

십육진수는 한 글자당 열여섯 종류의 숫자를 표현할 수 있습니다.

십육진수를 이루는 숫자 하나를 이진수로 표현하려면 4비트가 필요합니다.

십육진ㄴ수를 이진수로 변환하는 간편한 방법 중 하나는 십육진수 한 글자를 4비트의 이진수로 간주하는 겁니다.

각 글자를 따로따로 이진수로 변환하고, 그것을 이어 붙이면 이진수로 변환이 됩니다.

### 이진수를 십육진수로 변환하기

반대로 이진수를 십육진수로 변환할 때는 이진수 숫자를 네 개씩 끊고, 끊어 준 네 개의 숫자를 하나의 십육진수로 변환한 뒤 그대로 이어붙이면 됩니다.

### 5가지 핵심 키워드

- **비트는** 0과 1로 표현할 수 있는 가장 작은 정보 단위입니다.
- 바이트, 킬로바이트, 메가바이트, 기가바이트, 테라바이트는 비트보다 더 큰 정보 단위입니다.
- 이진법은 1을 넘어가는 시점에 자리 올림을 하여 0과 1만으로 수를 표현하는 방법입니다.
- 이진법에서 음수는 2의 보수로 표현할 수 있습니다.
- 십육진법은 15를 넘어가는 시점에 자리 올림하여 수를 표현하는 방법입니다.

# 0과 1로 문자를 표현하는 방법

## 문자 집합과 인코딩

알아보기 전에 반드시 알아야 할 세 가지 용어가 있다.

**문자 집합, 인코딩, 디코딩**

컴퓨터가 인식하고 표현할 수 있는 문자의 모음은 **문자 집합** 이라고 한다.

문자 집합에 속한 문자라고 해서 컴퓨터가 그대로 이해할 수 있는건 아니다.

문자를 0과 1로 변환해야 이해할 수 있는데 이 과정을 **문자 인코딩** 이라 하고 0과 1로 이루어진 결과값이 문자 코드가 됩니다.

인코딩의 반대 과정, 즉 0과 1로 이루어진 문자 코드를 사람이 이해할 수 있는 문자로 변환하는 과정은 **문자 디코딩** 이라 합니다.

## 아스키 코드

아스키는 초창기 문자 집합 중 하나로, 영어 알파벳과 아라비아 숫자, 일부 특수 문자를 표현한다.

7비트로 표현되는데, 총 128개의 문자를 표현할 수 있습니다.

훗날에는 더 다양한 문자 표현을 위해 아스키 코드에 1비트를 추가한 8비트 **확장 아스키**가 등장하기도 했지만 부족했다

각 많은 나라들은 고유한 문자 집합과 인코딩 방식이 필요하다고 생각을 했고 이런 이유로 나오게 된 방식이 

**EUC-KR**

## **EUC-KR**

이는 인코딩 방식으로 총 2,350개 정도의 한글 단어를 표현할 수 있습니다.

하지만 ‘쀍’ 같은 글자는 표현할 수 없습니다.

이 문제를 조금이나마 해결하기 위해 등장한 것이 마이크로소프트의 **CP949**입니다.

다만 이마저도 한글 전체를 표현하기에 넉넉한 양은 아닙니다.

## 유니코드와 UTF-8

다국어를 지원하는 프로그램을 만들 때 각 나라 언어의 인코딩을 모두 알아야 하는 번거로움이 있다.

그래서 등장한 것이 **유니코드** 문자 집합입니다.

인코딩 방법에는 크게 UTF-8,UTF-16,UTF-32등이 있습니다.

가장 대중적인건 **UTF-8**이고 이는 통상 1바이트부터 4바이트까지 인코딩 결과를 만들어 냅니다.

값이 1~4바이트 뭐든 될 수 있습니다.

- 4가지 키워드로 정리하는 핵심포인트
    - **문자 집합**은 컴퓨터가 인식할 수 있는 문자의 모음으로, 문자 집합에 속한 문자를 인코딩하여 0과 1로 표현할 수 있습니다.
    - 아스키 문자 집합에서 0부터 127까지의 수가 할당되어 **아스키 코드**로 인코딩됩니다.
    - **EUC-KR**은 한글을 2바이트 크기로 인코딩 할 수 있는 완성형 인코딩 방식입니다.
    - **유니코드**는 여러 나라 문자들을 광범위하게 표현할 수 있는 통일된 문자 집합이며, UTF-8,UTF-16,UTF-32는 유니코드의 인코딩 방식입니다.
